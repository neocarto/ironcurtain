library(sf)
library(rnaturalearth)
library("eurostat")
# Fond de carte
# Creation d'un fond de carte hybride compatible avec un maillage homogène nuts2/3.
# Tous les les pays sont au niveau nuts3 version 2016 sauf l'Autriche, la Belgique, la Suisse, l'Allemagne, la Grèce, les Pays-Bas, la Turquie, l'Irlande, l'Islande et la Norvège.
# Pour des raisons de disponibilité des données post Brexit, Le Royaume-Uni est au niveau nuts2 vesrion 2013.
nuts2016 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "all",
year = "2016"
)
nuts2016_3 <- nuts2016[nuts2016$LEVL_CODE == 3, ]
nuts2016_2 <- nuts2016[nuts2016$LEVL_CODE == 2, ]
N2 <-
c("AT", "BE", "CH", "DE", "EL", "NL", "UK", "TR", "IE", "IS", "NO")
nuts <- rbind(nuts2016_2[nuts2016_2$CNTR_CODE %in% N2, ],
nuts2016_3[!nuts2016_3$CNTR_CODE %in% N2, ])
nuts <- nuts[nuts$CNTR_CODE != "UK", ]
nuts <- nuts[,c("id","NUTS_NAME","geometry")]
colnames(nuts) <- c("id","name","geometry")
nuts2013 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "2",
year = "2013"
)
uk = nuts2013[nuts2013$CNTR_CODE == "UK",c("id","NUTS_NAME","geometry")]
colnames(uk) <- c("id","name","geometry")
nuts <- rbind(nuts, uk)
nuts <-
nuts[!nuts$id %in% c("FRY10", "FRY20", "FRY30", "FRY40", "FRY50"), ]
nuts <- nuts[nuts$id != "RS", ]
plot(st_geometry(nuts))
# Données
# Import des données statistiques (PIB par habitant en euros zn 2016)
var <- "nama_10r_3gdp"
gdpinh <- get_eurostat(var, time_format = "num")
gdpinh <- subset(gdpinh, gdpinh$unit == "EUR_HAB")
gdpinh <- reshape2::dcast(gdpinh, geo ~ time, value.var = "values")
fields <- c("geo", "2016")
gdpinh <- gdpinh[, fields]
colnames(gdpinh) <- c("id","GDPINH_2016")
# Les données manquantes sont issues de la base de données ESPON et d'estimations
missing <- read.csv("data/missing.csv")
gdpinh = rbind(gdpinh, missing)
# Pour des questions de reproductibilité, nous sauvegardons les données dans le répertoire data.
write.csv(gdpinh, "data/gdpinh.csv")
# Jointure
nuts <- merge(
x = nuts,
y = gdpinh,
by = "id",
all.x = TRUE
)
View(nuts)
nuts$ctr = substr(nuts$id,1,2)
View(nuts)
## Global options
knitr::opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="bg-info",
class.output="bg-warning")
library("cartography")
remotes::install_gitlab("rzine/package", host = "https://gitlab.huma-num.fr/", force = TRUE)
install.packages("eurostat")
install.packages("rnaturalearth")
install.packages("cartography")
install.packages("rgdal")
install.packages("lwgeom")
install.packages("bibtex")
library("sf")
library("mapsf")
library("eurostat")
library("rnaturalearth")
nuts2016 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "all",
year = "2016"
)
nuts2016_3 <- nuts2016[nuts2016$LEVL_CODE == 3, ]
nuts2016_2 <- nuts2016[nuts2016$LEVL_CODE == 2, ]
N2 <-
c("AT", "BE", "CH", "DE", "EL", "NL", "UK", "TR", "IE", "IS", "NO")
nuts <- rbind(nuts2016_2[nuts2016_2$CNTR_CODE %in% N2, ],
nuts2016_3[!nuts2016_3$CNTR_CODE %in% N2, ])
nuts <- nuts[nuts$CNTR_CODE != "UK", ]
nuts <- nuts[,c("id","NUTS_NAME","geometry")]
colnames(nuts) <- c("id","name","geometry")
nuts2013 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "2",
year = "2013"
)
uk = nuts2013[nuts2013$CNTR_CODE == "UK",c("id","NUTS_NAME","geometry")]
colnames(uk) <- c("id","name","geometry")
nuts <- rbind(nuts, uk)
nuts <-
nuts[!nuts$id %in% c("FRY10", "FRY20", "FRY30", "FRY40", "FRY50"), ]
nuts <- nuts[nuts$id != "RS", ]
plot(st_geometry(nuts))
library("sf")
library("mapsf")
library("eurostat")
library("rnaturalearth")
nuts2016 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "all",
year = "2016"
)
nuts2016_3 <- nuts2016[nuts2016$LEVL_CODE == 3, ]
nuts2016_2 <- nuts2016[nuts2016$LEVL_CODE == 2, ]
N2 <-
c("AT", "BE", "CH", "DE", "EL", "NL", "UK", "TR", "IE", "IS", "NO")
nuts <- rbind(nuts2016_2[nuts2016_2$CNTR_CODE %in% N2, ],
nuts2016_3[!nuts2016_3$CNTR_CODE %in% N2, ])
nuts <- nuts[nuts$CNTR_CODE != "UK", ]
nuts <- nuts[,c("id","NUTS_NAME","geometry")]
colnames(nuts) <- c("id","name","geometry")
nuts2013 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "2",
year = "2013"
)
uk = nuts2013[nuts2013$CNTR_CODE == "UK",c("id","NUTS_NAME","geometry")]
colnames(uk) <- c("id","name","geometry")
nuts <- rbind(nuts, uk)
nuts <-
nuts[!nuts$id %in% c("FRY10", "FRY20", "FRY30", "FRY40", "FRY50"), ]
nuts <- nuts[nuts$id != "RS", ]
ortho <- "+proj=ortho +lat_0=-10 +lon_0=15 +x_0=0 +y_0=0
+ellps=WGS84 +units=m +no_defs"
nuts <- st_transform(nuts, ortho)
plot(st_geometry(nuts))
plot(st_geometry(nuts))
borders <- st_intersection(st_buffer(nuts, 5), st_buffer(nuts, 5))
borders <- st_cast(borders,"MULTILINESTRING")
head(borders)
borders <- borders[borders$id != borders$id.1, ]
plot(st_geometry(borders), col = "red", add= T)
test = getBorders(nuts)
library("cartography")
test = getBorders(nuts)
head(nuts)
head(test)
head(borders)
library("sf")
library("mapsf")
library("eurostat")
library("rnaturalearth")
library("cartography")
nuts2016 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "all",
year = "2016"
)
nuts2016_3 <- nuts2016[nuts2016$LEVL_CODE == 3, ]
nuts2016_2 <- nuts2016[nuts2016$LEVL_CODE == 2, ]
N2 <-
c("AT", "BE", "CH", "DE", "EL", "NL", "UK", "TR", "IE", "IS", "NO")
nuts <- rbind(nuts2016_2[nuts2016_2$CNTR_CODE %in% N2, ],
nuts2016_3[!nuts2016_3$CNTR_CODE %in% N2, ])
nuts <- nuts[nuts$CNTR_CODE != "UK", ]
nuts <- nuts[,c("id","NUTS_NAME","geometry")]
colnames(nuts) <- c("id","name","geometry")
nuts2013 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "2",
year = "2013"
)
uk = nuts2013[nuts2013$CNTR_CODE == "UK",c("id","NUTS_NAME","geometry")]
colnames(uk) <- c("id","name","geometry")
nuts <- rbind(nuts, uk)
nuts <-
nuts[!nuts$id %in% c("FRY10", "FRY20", "FRY30", "FRY40", "FRY50"), ]
nuts <- nuts[nuts$id != "RS", ]
ortho <- "+proj=ortho +lat_0=-10 +lon_0=15 +x_0=0 +y_0=0
+ellps=WGS84 +units=m +no_defs"
nuts <- st_transform(nuts, ortho)
plot(st_geometry(nuts))
borders <- st_intersection(st_buffer(nuts, 5), st_buffer(nuts, 5))
borders <- st_cast(borders,"MULTILINESTRING")
borders <- borders[borders$id != borders$id.1, ]
borders$id1 = id
borders$id2 = id.1
borders$id = paste0(borders$id1, "_", borders$id2)
head(borders)
library("sf")
library("mapsf")
library("eurostat")
library("rnaturalearth")
library("cartography")
nuts2016 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "all",
year = "2016"
)
nuts2016_3 <- nuts2016[nuts2016$LEVL_CODE == 3, ]
nuts2016_2 <- nuts2016[nuts2016$LEVL_CODE == 2, ]
N2 <-
c("AT", "BE", "CH", "DE", "EL", "NL", "UK", "TR", "IE", "IS", "NO")
nuts <- rbind(nuts2016_2[nuts2016_2$CNTR_CODE %in% N2, ],
nuts2016_3[!nuts2016_3$CNTR_CODE %in% N2, ])
nuts <- nuts[nuts$CNTR_CODE != "UK", ]
nuts <- nuts[,c("id","NUTS_NAME","geometry")]
colnames(nuts) <- c("id","name","geometry")
nuts2013 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "2",
year = "2013"
)
uk = nuts2013[nuts2013$CNTR_CODE == "UK",c("id","NUTS_NAME","geometry")]
colnames(uk) <- c("id","name","geometry")
nuts <- rbind(nuts, uk)
nuts <-
nuts[!nuts$id %in% c("FRY10", "FRY20", "FRY30", "FRY40", "FRY50"), ]
nuts <- nuts[nuts$id != "RS", ]
ortho <- "+proj=ortho +lat_0=-10 +lon_0=15 +x_0=0 +y_0=0
+ellps=WGS84 +units=m +no_defs"
nuts <- st_transform(nuts, ortho)
plot(st_geometry(nuts))
borders <- st_intersection(st_buffer(nuts, 5), st_buffer(nuts, 5))
borders <- st_cast(borders,"MULTILINESTRING")
borders <- borders[borders$id != borders$id.1, ]
borders$id1 = borders$id
borders$id2 = borders$id.1
borders$id = paste0(borders$id1, "_", borders$id2)
head(borders)
borders = borders[,c("id","id1","id2","geometry")]
head(borders)
head(test)
head(borders)
rownames(borders) = aste0(borders$id1, "_", borders$id2)
rownames(borders) = paste0(borders$id1, "_", borders$id2)
head(borders)
library("sf")
library("mapsf")
library("eurostat")
library("rnaturalearth")
library("cartography")
nuts2016 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "all",
year = "2016"
)
nuts2016_3 <- nuts2016[nuts2016$LEVL_CODE == 3, ]
nuts2016_2 <- nuts2016[nuts2016$LEVL_CODE == 2, ]
N2 <-
c("AT", "BE", "CH", "DE", "EL", "NL", "UK", "TR", "IE", "IS", "NO")
nuts <- rbind(nuts2016_2[nuts2016_2$CNTR_CODE %in% N2, ],
nuts2016_3[!nuts2016_3$CNTR_CODE %in% N2, ])
nuts <- nuts[nuts$CNTR_CODE != "UK", ]
nuts <- nuts[,c("id","NUTS_NAME","geometry")]
colnames(nuts) <- c("id","name","geometry")
nuts2013 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "2",
year = "2013"
)
uk = nuts2013[nuts2013$CNTR_CODE == "UK",c("id","NUTS_NAME","geometry")]
colnames(uk) <- c("id","name","geometry")
nuts <- rbind(nuts, uk)
nuts <-
nuts[!nuts$id %in% c("FRY10", "FRY20", "FRY30", "FRY40", "FRY50"), ]
nuts <- nuts[nuts$id != "RS", ]
ortho <- "+proj=ortho +lat_0=-10 +lon_0=15 +x_0=0 +y_0=0
+ellps=WGS84 +units=m +no_defs"
nuts <- st_transform(nuts, ortho)
plot(st_geometry(nuts))
borders <- st_intersection(st_buffer(nuts, 5), st_buffer(nuts, 5))
borders <- st_cast(borders,"MULTILINESTRING")
borders <- borders[borders$id != borders$id.1, ]
borders$id1 = borders$id
borders$id2 = borders$id.1
rownames(borders) = paste0(borders$id1, "_", borders$id2)
borders = borders[,c("id","id1","id2","geometry")]
head(borders)
var <- "nama_10r_3gdp"
gdpinh <- get_eurostat(var, time_format = "num")
gdpinh <- subset(gdpinh, gdpinh$unit == "EUR_HAB")
View(gdpinh)
gdpinh <- reshape2::dcast(gdpinh, geo ~ time, value.var = "values")
View(gdpinh)
var <- "nama_10r_3gdp"
gdpinh <- get_eurostat(var, time_format = "num")
gdpinh <- subset(gdpinh, gdpinh$unit == "EUR_HAB")
View(gdpinh)
gdpinh <- gdpinh[gdpinh$time == 2016]
gdpinh <- gdpinh[gdpinh$time == 2016,]
View(gdpinh)
var <- "nama_10r_3gdp"
gdpinh <- get_eurostat(var, time_format = "num")
gdpinh <- subset(gdpinh, gdpinh$unit == "EUR_HAB")
gdpinh <- gdpinh[gdpinh$time == 2016,c("geo","values")]
View(gdpinh)
library("eurostat")
var <- "nama_10r_3gdp"
gdpinh <- get_eurostat(var, time_format = "num")
gdpinh <- subset(gdpinh, gdpinh$unit == "EUR_HAB")
gdpinh <- gdpinh[gdpinh$time == 2016,c("geo","values")]
colnames(gdpinh) <- c("id","GDPINH_2016")
View(gdpinh)
nuts.borders  <- st_intersection(st_buffer(nuts, 5), st_buffer(nuts, 5))
nuts.borders  <- st_cast(nuts.borders ,"MULTILINESTRING")
nuts.borders  <- nuts.borders [nuts.borders $id != nuts.borders $id.1, ]
nuts.borders $id1 = nuts.borders $id
nuts.borders $id2 = nuts.borders $id.1
rownames(nuts.borders ) = paste0(nuts.borders $id1, "_", nuts.borders $id2)
nuts.borders  = nuts.borders [,c("id","id1","id2","geometry")]
nuts.borders  <- st_intersection(st_buffer(nuts, 5), st_buffer(nuts, 5))
nuts.borders  <- st_cast(nuts.borders ,"MULTILINESTRING")
nuts.borders  <- nuts.borders [nuts.borders $id != nuts.borders $id.1, ]
nuts.borders $id1 = nuts.borders $id
nuts.borders $id2 = nuts.borders $id.1
rownames(nuts.borders ) = paste0(nuts.borders $id1, "_", nuts.borders $id2)
nuts.borders  = nuts.borders [,c("id","id1","id2","geometry")]
vals <- nuts[,c("id","GDPINH_2016")] %>% st_set_geometry(NULL)
nuts.borders <- merge (x = nuts.borders, y = vals,
by.x = "id1", by.y = "id", all.x = T)
nuts.borders <- merge (x = nuts.borders, y = vals,
by.x = "id2", by.y = "id", all.x = T)
library("sf")
library("mapsf")
library("eurostat")
library("rnaturalearth")
library("sf")
library("mapsf")
library("eurostat")
library("rnaturalearth")
nuts2016 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "all",
year = "2016"
)
nuts2016_3 <- nuts2016[nuts2016$LEVL_CODE == 3, ]
nuts2016_2 <- nuts2016[nuts2016$LEVL_CODE == 2, ]
N2 <-
c("AT", "BE", "CH", "DE", "EL", "NL", "UK", "TR", "IE", "IS", "NO")
nuts <- rbind(nuts2016_2[nuts2016_2$CNTR_CODE %in% N2, ],
nuts2016_3[!nuts2016_3$CNTR_CODE %in% N2, ])
nuts <- nuts[nuts$CNTR_CODE != "UK", ]
nuts <- nuts[,c("id","NUTS_NAME","geometry")]
colnames(nuts) <- c("id","name","geometry")
nuts2013 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "2",
year = "2013"
)
uk = nuts2013[nuts2013$CNTR_CODE == "UK",c("id","NUTS_NAME","geometry")]
colnames(uk) <- c("id","name","geometry")
nuts <- rbind(nuts, uk)
nuts <-
nuts[!nuts$id %in% c("FRY10", "FRY20", "FRY30", "FRY40", "FRY50"), ]
nuts <- nuts[nuts$id != "RS", ]
var <- "nama_10r_3gdp"
gdpinh <- get_eurostat(var, time_format = "num")
gdpinh <- subset(gdpinh, gdpinh$unit == "EUR_HAB")
gdpinh <- gdpinh[gdpinh$time == 2016,c("geo","values")]
colnames(gdpinh) <- c("id","GDPINH_2016")
missing <- read.csv("data/missing.csv")
gdpinh = rbind(gdpinh, missing)
nuts <- merge(
x = nuts,
y = gdpinh,
by = "id",
all.x = TRUE
)
nuts.borders  <- st_intersection(st_buffer(nuts, 5), st_buffer(nuts, 5))
nuts.borders  <- st_cast(nuts.borders ,"MULTILINESTRING")
nuts.borders  <- nuts.borders [nuts.borders $id != nuts.borders $id.1, ]
nuts.borders $id1 = nuts.borders $id
nuts.borders $id2 = nuts.borders $id.1
rownames(nuts.borders ) = paste0(nuts.borders $id1, "_", nuts.borders $id2)
nuts.borders  = nuts.borders [,c("id","id1","id2","geometry")]
vals <- nuts[,c("id","GDPINH_2016")] %>% st_set_geometry(NULL)
nuts.borders <- merge (x = nuts.borders, y = vals,
by.x = "id1", by.y = "id", all.x = T)
nuts.borders <- merge (x = nuts.borders, y = vals,
by.x = "id2", by.y = "id", all.x = T)
nuts.borders$disc <- nuts.borders$GDPINH_2016.x / nuts.borders$GDPINH_2016.y
threshold <- 0.95
disc <- nuts.borders[nuts.borders$disc >= quantile(nuts.borders$disc,threshold),]
View(disc)
View(nuts.borders)
library("sf")
library("mapsf")
library("eurostat")
library("rnaturalearth")
nuts2016 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "all",
year = "2016"
)
nuts2016_3 <- nuts2016[nuts2016$LEVL_CODE == 3, ]
nuts2016_2 <- nuts2016[nuts2016$LEVL_CODE == 2, ]
N2 <-
c("AT", "BE", "CH", "DE", "EL", "NL", "UK", "TR", "IE", "IS", "NO")
nuts <- rbind(nuts2016_2[nuts2016_2$CNTR_CODE %in% N2, ],
nuts2016_3[!nuts2016_3$CNTR_CODE %in% N2, ])
nuts <- nuts[nuts$CNTR_CODE != "UK", ]
nuts <- nuts[,c("id","NUTS_NAME","geometry")]
colnames(nuts) <- c("id","name","geometry")
nuts2013 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "2",
year = "2013"
)
uk = nuts2013[nuts2013$CNTR_CODE == "UK",c("id","NUTS_NAME","geometry")]
colnames(uk) <- c("id","name","geometry")
nuts <- rbind(nuts, uk)
nuts <-
nuts[!nuts$id %in% c("FRY10", "FRY20", "FRY30", "FRY40", "FRY50"), ]
nuts <- nuts[nuts$id != "RS", ]
var <- "nama_10r_3gdp"
gdpinh <- get_eurostat(var, time_format = "num")
gdpinh <- subset(gdpinh, gdpinh$unit == "EUR_HAB")
gdpinh <- gdpinh[gdpinh$time == 2016,c("geo","values")]
colnames(gdpinh) <- c("id","GDPINH_2016")
missing <- read.csv("data/missing.csv")
gdpinh = rbind(gdpinh, missing)
nuts <- merge(
x = nuts,
y = gdpinh,
by = "id",
all.x = TRUE
)
nuts.borders  <- st_intersection(st_buffer(nuts, 5), st_buffer(nuts, 5))
nuts.borders  <- st_cast(nuts.borders ,"MULTILINESTRING")
nuts.borders  <- nuts.borders [nuts.borders $id != nuts.borders $id.1, ]
nuts.borders $id1 = nuts.borders $id
nuts.borders $id2 = nuts.borders $id.1
rownames(nuts.borders ) = paste0(nuts.borders $id1, "_", nuts.borders $id2)
nuts.borders  = nuts.borders [,c("id","id1","id2","geometry")]
vals <- nuts[,c("id","GDPINH_2016")] %>% st_set_geometry(NULL)
nuts.borders <- merge (x = nuts.borders, y = vals,
by.x = "id1", by.y = "id", all.x = T)
nuts.borders <- merge (x = nuts.borders, y = vals,
by.x = "id2", by.y = "id", all.x = T)
library("sf")
library("mapsf")
library("eurostat")
library("rnaturalearth")
nuts2016 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "all",
year = "2016"
)
nuts2016_3 <- nuts2016[nuts2016$LEVL_CODE == 3, ]
nuts2016_2 <- nuts2016[nuts2016$LEVL_CODE == 2, ]
N2 <-
c("AT", "BE", "CH", "DE", "EL", "NL", "UK", "TR", "IE", "IS", "NO")
nuts <- rbind(nuts2016_2[nuts2016_2$CNTR_CODE %in% N2, ],
nuts2016_3[!nuts2016_3$CNTR_CODE %in% N2, ])
nuts <- nuts[nuts$CNTR_CODE != "UK", ]
nuts <- nuts[,c("id","NUTS_NAME","geometry")]
colnames(nuts) <- c("id","name","geometry")
nuts2013 <- get_eurostat_geospatial(
output_class = "sf",
resolution = "20",
nuts_level = "2",
year = "2013"
)
uk = nuts2013[nuts2013$CNTR_CODE == "UK",c("id","NUTS_NAME","geometry")]
colnames(uk) <- c("id","name","geometry")
nuts <- rbind(nuts, uk)
nuts <-
nuts[!nuts$id %in% c("FRY10", "FRY20", "FRY30", "FRY40", "FRY50"), ]
nuts <- nuts[nuts$id != "RS", ]
var <- "nama_10r_3gdp"
gdpinh <- get_eurostat(var, time_format = "num")
gdpinh <- subset(gdpinh, gdpinh$unit == "EUR_HAB")
gdpinh <- gdpinh[gdpinh$time == 2016,c("geo","values")]
colnames(gdpinh) <- c("id","GDPINH_2016")
missing <- read.csv("data/missing.csv")
gdpinh = rbind(gdpinh, missing)
nuts <- merge(
x = nuts,
y = gdpinh,
by = "id",
all.x = TRUE
)
nuts.borders  <- st_intersection(st_buffer(nuts, 5), st_buffer(nuts, 5))
## Global options
knitr::opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="bg-info",
class.output="bg-warning")
disc <- st_cast(disc,"LINESTRING")
